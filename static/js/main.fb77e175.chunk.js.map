{"version":3,"sources":["components/lists/feed.js","components/lists/index.js","components/forms/index.js","components/conditional/index.js","components/menbers/Menbers.js","App.js","serviceWorker.js","index.js"],"names":["Feed","key","this","props","id","name","like","comments","Component","Lists","state","feed","map","item","CustomForm","email","pass","changeEmail","bind","e","valueTyped","target","value","setState","type","placeholder","onChange","Condition","Membro","login","logout","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAceA,E,iLAVP,OACI,wBAAIC,IAAKC,KAAKC,MAAMC,IAApB,SACWF,KAAKC,MAAME,KADtB,IAC4B,6BACvBH,KAAKC,MAAMG,KAAO,EAAIJ,KAAKC,MAAMG,KAAO,YAAcJ,KAAKC,MAAMG,KAAO,WAF7E,IAEyF,6BACpFJ,KAAKC,MAAMI,SAAW,EAAIL,KAAKC,MAAMI,SAAW,kBAAiBL,KAAKC,MAAMI,SAAW,iBAH5F,IAG2G,6BAAK,kC,GANzGC,aC2BJC,E,YAxBX,WAAYN,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTC,KAAM,CACF,CAACP,GAAG,EAAGC,KAAM,SAAUC,KAAM,EAAGC,SAAS,IACzC,CAACH,GAAG,EAAGC,KAAM,SAAUC,KAAM,IAAKC,SAAU,KAC5C,CAACH,GAAG,EAAGC,KAAM,UAAWC,KAAK,IAAMC,SAAS,OANtC,E,sEAYd,OACI,4BACKL,KAAKQ,MAAMC,KAAKC,KAAK,SAACC,GACnB,OACI,kBAAC,EAAD,CAAcZ,IAAKY,EAAKT,GAAIC,KAAMQ,EAAKR,KAAMC,KAAMO,EAAKP,KAAMC,SAAUM,EAAKN,mB,GAlBjFC,aCsCLM,E,YArCX,WAAYX,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTK,MAAO,iBACPC,KAAM,IAEV,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBANL,E,yEASNC,GACR,IAAIC,EAAaD,EAAEE,OAAOC,MAC1BpB,KAAKqB,SAAS,CAACR,MAAOK,M,+BAIjB,IAAD,OACJ,OACA,6BACI,8BACI,6CACI,2BAAOI,KAAK,OAAOC,YAAY,UAEnC,6CACI,2BAAOD,KAAK,QAAQC,YAAY,SAASH,MAAOpB,KAAKQ,MAAMK,MAAOW,SAAUxB,KAAKe,eAErF,6CACI,2BAAOO,KAAK,WAAWC,YAAY,QAAQH,MAAOpB,KAAKQ,MAAMM,KACzDU,SAAU,SAACP,GAAD,OAAM,EAAKI,SAAS,CAACP,KAAMG,EAAEE,OAAOC,aAG1D,2BAAIpB,KAAKQ,MAAMK,OACf,2BAAIb,KAAKQ,MAAMM,W,GAjCFR,aCaVmB,E,iLATP,OACI,uCAAUzB,KAAKC,MAAME,KAArB,6EACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALYG,aCkCToB,E,YAjCX,WAAYzB,GAAO,IAAD,8BACd,4CAAMA,KACDO,MAAQ,CACTL,KAAMF,EAAME,KACZwB,MAAO,YACPnB,MAAO,GAEX,EAAKmB,MAAQ,EAAKA,MAAMX,KAAX,gBACb,EAAKY,OAAS,EAAKA,OAAOZ,KAAZ,gBARA,E,qEAYdhB,KAAKqB,SAAS,CAAClB,KAAM,SAAUwB,MAAO,SAAUnB,MAAO,M,+BAIvDR,KAAKqB,SAAS,CAAClB,KAAM,WAAYwB,MAAO,YAAanB,MAAO,M,+BAI5D,OACE,6BACA,yDACA,4BAAQqB,QAAS7B,KAAK2B,OAAtB,0BACA,4BAAQE,QAAS7B,KAAK4B,QAAtB,yBACsB,IAArB5B,KAAKQ,MAAMA,MACV,kBAAC,EAAD,CAAaL,KAAK,WAAa,qE,GA5BtBG,aCWNwB,E,iLARP,OACI,6BACI,kBAAC,EAAD,CAAQ3B,KAAK,mB,GALXG,aCSEyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.fb77e175.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nclass Feed extends Component{\r\n    render(){\r\n        return(\r\n            <li key={this.props.id}>\r\n                Nome: {this.props.name} <br/>\r\n                {this.props.like > 1 ? this.props.like + ' Curtidas' : this.props.like + ' Curtida'} <br/>\r\n                {this.props.comments > 1 ? this.props.comments + ' Comentários' : this.props.comments + ' Comentário'} <br/><br/>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Feed;","import React, {Component} from 'react';\r\nimport FeedTemplate from './feed'\r\n\r\nclass Lists extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            feed: [\r\n                {id:1, name: 'THIAGO', like: 1, comments:20},\r\n                {id:2, name: 'Raquel', like: 100, comments: 200},\r\n                {id:3, name: \"rodrigo\", like:1000, comments:20000}\r\n            ]\r\n        }\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <ul>\r\n                {this.state.feed.map( (item) => {\r\n                    return(\r\n                        <FeedTemplate key={item.id} name={item.name} like={item.like} comments={item.comments}/>\r\n                    )\r\n                })}\r\n            </ul>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Lists;","import React, {Component} from 'react';\r\n\r\nclass CustomForm extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            email: 'nome@email.com',\r\n            pass: ''\r\n        }\r\n        this.changeEmail = this.changeEmail.bind(this)\r\n    }\r\n\r\n    changeEmail(e){\r\n        let valueTyped = e.target.value;\r\n        this.setState({email: valueTyped})\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n        <div>\r\n            <form>\r\n                <label>First name:\r\n                    <input type='text' placeholder=\"Nome\"/>\r\n                </label>\r\n                <label>First name:\r\n                    <input type='email' placeholder=\"E-mail\" value={this.state.email} onChange={this.changeEmail}/>\r\n                </label>\r\n                <label>First name:\r\n                    <input type='password' placeholder=\"Senha\" value={this.state.pass} \r\n                        onChange={(e)=> this.setState({pass: e.target.value})}/>\r\n                </label>\r\n            </form>\r\n            <p>{this.state.email}</p>\r\n            <p>{this.state.pass}</p>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CustomForm;","import React, {Component} from 'react';\r\nimport Lists from '../lists'\r\nimport Form from '../forms'\r\n\r\nclass Condition extends Component{\r\n    render(){\r\n        return(\r\n            <div>Olá {this.props.name} essa é uma área logada do nosso site. Fique a vontade para apreciar\r\n            <Lists/>\r\n            <Form/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Condition;","import React, {Component} from 'react';\r\nimport Conditional from '../conditional'\r\n\r\nclass Membro extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            name: props.name,\r\n            login: \"deslogado\",\r\n            state: 0\r\n        }\r\n        this.login = this.login.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n\r\n    login(){\r\n        this.setState({name: \"thiago\", login: \"logado\", state: 1})\r\n    }\r\n\r\n    logout(){\r\n        this.setState({name: \"Visitate\", login: \"deslogado\", state: 0})\r\n    }\r\n\r\n    render(){\r\n        return(\r\n          <div>\r\n          <h2>Bem vindo ao nosso site 2</h2> \r\n          <button onClick={this.login}>Clique aqui para logar</button>   \r\n          <button onClick={this.logout}>Clique aqui para sair</button>\r\n          {this.state.state === 1 ? \r\n            <Conditional name=\"Thiago\"/> : <div> Você não está logado </div> \r\n           }\r\n          </div>  \r\n        );       \r\n    }\r\n}\r\n\r\nexport default Membro;","import React, {Component} from 'react';\r\nimport Membro from './components/menbers/Menbers';\r\n\r\nclass App extends Component{\r\n\r\n    render(){\r\n        return(\r\n            <div>\r\n                <Membro name=\"Visitante\"/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}